from abc import ABC
from typing import Any, Iterable, Mapping

from torch import Size

from .. import special
from ..core import FLRWDriver
from ...utils._typing import _TN


class OdeintFLRWDriver(FLRWDriver, ABC):
    odeint_adjoint_kwargs: Mapping[str, Any]
    
    @property
    def adjoint_params(self) -> Iterable: ...
    
    @property
    def _param_shape(self) -> Size: ...
    
    def _integrate(self, z1: _TN, z2: _TN, func): ...
    
    def comoving_distance_dimless_z1z2(self, z1: _TN, z2: _TN) -> _TN: ...
    def lookback_time_dimless(self, z: _TN) -> _TN: ...
    def absorption_distance_dimless(self, z: _TN) -> _TN: ...
    
    def __init_subclass__(cls, **kwargs) -> None: ...

class LambdaCDM(OdeintFLRWDriver, special.LambdaCDM, ABC): ...
class LambdaCDMR(OdeintFLRWDriver, special.LambdaCDMR, ABC): ...
class wCDM(OdeintFLRWDriver, special.wCDM, ABC): ...
class wCDMR(OdeintFLRWDriver, special.wCDMR, ABC): ...
class w0waCDM(OdeintFLRWDriver, special.w0waCDM, ABC): ...
class w0waCDMR(OdeintFLRWDriver, special.w0waCDMR, ABC): ...
class wpwaCDM(OdeintFLRWDriver, special.wpwaCDM, ABC): ...
class wpwaCDMR(OdeintFLRWDriver, special.wpwaCDMR, ABC): ...
class w0wzCDM(OdeintFLRWDriver, special.w0wzCDM, ABC): ...
class w0wzCDMR(OdeintFLRWDriver, special.w0wzCDMR, ABC): ...

class FlatLambdaCDM(OdeintFLRWDriver, special.FlatLambdaCDM, ABC): ...
class FlatLambdaCDMR(OdeintFLRWDriver, special.FlatLambdaCDMR, ABC): ...
class FlatwCDM(OdeintFLRWDriver, special.FlatwCDM, ABC): ...
class FlatwCDMR(OdeintFLRWDriver, special.FlatwCDMR, ABC): ...
class Flatw0waCDM(OdeintFLRWDriver, special.Flatw0waCDM, ABC): ...
class Flatw0waCDMR(OdeintFLRWDriver, special.Flatw0waCDMR, ABC): ...
class FlatwpwaCDM(OdeintFLRWDriver, special.FlatwpwaCDM, ABC): ...
class FlatwpwaCDMR(OdeintFLRWDriver, special.FlatwpwaCDMR, ABC): ...
class Flatw0wzCDM(OdeintFLRWDriver, special.Flatw0wzCDM, ABC): ...
class Flatw0wzCDMR(OdeintFLRWDriver, special.Flatw0wzCDMR, ABC): ...
