from cmath import atan, cos, inf, log, nan, pi, sin
from math import gamma

from pytest import mark
from torch import tensor

from phytorch.special.hyper import hyp2f1
from tests.common.closeness import close
from tests.common.dtypes import with_default_double


cases = {
    hyp2f1: (
        # from scipy/special/tests/test_basic.py
        # https://github.com/scipy/scipy/blob/3c35f0a3abdd07c2d2b8f2f1528709d6a393498e/scipy/special/tests/test_basic.py#L2140
        (0.5, 1, 1.5, 0.2**2, 0.5 / 0.2 * log((1 + 0.2) / (1 - 0.2))),
        (0.5, 1, 1.5, -0.2**2, 1. / 0.2 * atan(0.2)),
        (1, 1, 2, 0.2, -1 / 0.2 * log(1 - 0.2)),
        (3, 3.5, 1.5, 0.2**2, 0.5 / 0.2 / (-5) * ((1 + 0.2)**(-5) - (1 - 0.2)**(-5))),
        (-3, 3, 0.5, sin(0.2)**2, cos(2 * 3 * 0.2)),
        (3, 4, 8, 1, gamma(8) * gamma(8 - 4 - 3) / gamma(8 - 3) / gamma(8 - 4)),
        (3, 2, 2, -1, 1. / 2**3 * pi**0.5 * gamma(1 + 3 - 2) / gamma(1 + 0.5 * 3 - 2) / gamma(0.5 + 0.5 * 3)),
        (5, 2, 4, -1, 1. / 2**5 * pi**0.5 * gamma(1 + 5 - 2) / gamma(1 + 0.5 * 5 - 2) / gamma(0.5 + 0.5 * 5)),
        (4, 4.5, -6.5, -1. / 3,
         (8. / 9)**(-2 * 4) * gamma(4. / 3) * gamma(1.5 - 2 * 4) / gamma(3. / 2) / gamma(4. / 3 - 2 * 4)),
        (1.5, -0.5, 1, -10, 4.1300097765277476484),
        # # negative integer a or b, with c-a-b integer and x > 0.9
        (-2, 3, 1, 0.95, 0.715),
        (2, -3, 1, 0.95, -0.007),
        (-6, 3, 1, 0.95, 0.0000810625),
        (2, -5, 1, 0.95, -0.000029375),
        # # huge negative integers
        # TODO: gamma(complex) without overflowing...
        # (10, -900, 10.5, 0.99, 1.91853705796607664803709475658e-24),
        # (10, -900, -10.5, 0.99, 3.54279200040355710199058559155e-18),

        # from scipy/special/tests/test_mpmath.py
        # https://github.com/scipy/scipy/blob/70c8d80bd8ce97ea935d95111c779545c0aeb21e/scipy/special/tests/test_mpmath.py#L144
        # (-10, 900, -10.5, 0.99, 2.51017574e+22),
        # (-10, 900, 10.5, 0.99, 5.57482373e+17),
        # (0.5, 1 - 270.5, 1.5, 0.999**2, 5.39630525e-02),

        # do not converge in 6000 terms...
        # (2, -1, -1, 0.7, 2.4),
        # (2, -2, -2, 0.7, 3.87),
        (1, 2, 3, 0, 1),
        (1 / 3, 2 / 3, 5 / 6, 27 / 32, 1.6),
        (1 / 4, 1 / 2, 3 / 4, 80 / 81, 1.8),
        # (2, -2, -3, 3, 1.4),  # fails, nan+0j
        (2, -3, -2, 3, inf),
        (2, -1.5, -1.5, 3, 0.25),
        (0.7235, -1, -5, 0.3, 1.04341000),
        (0.25, 1. / 3, 2, 0.999, 1.06826449),
        (0.25, 1. / 3, 2, -1, 0.966565845),
        (2, 3, 5, 0.99, 27.6993479),
        (3. / 2, -0.5, 3, 0.99, 0.684030368),
        (2, 2.5, -3.25, 0.999, 2.18373933e+26),
        (-8, 18.016500331508873, 10.805295997850628, 0.90875647507000001, -3.56621634e-09),
        # (-1, 2, 1, 1, -1),  # fails, TODO: gammaprod
        (-1, 2, 1, -1, 3),
        # (-3, 13, 5, 1, -1.6),  # fails, TODO: gammaprod
        (-3, 13, 5, -1, 40),

        # from scipy/tests/special/test_hyp2f1.py
        # https://github.com/scipy/scipy/blob/9c2eff4826878df76deefd8045976a296ba0a07d/scipy/special/tests/test_hyp2f1.py#L57
        # --- test_c_non_positive_int
        (0.5, 0.2, -10, 0.2 + 0.2j, inf + 0j),  # rtol=0
        (0.5, 0.2, -10, 0, 1),  # rtol=0
        (0.5, 0, -10, 0.2 + 0.2j, 1),  # rtol=0
        # (0.5, 0, 0, 0.2 + 0.2j, 1),  # rtol=0,  TODO: does not converge
        (0.5, 0.2, 0, 0.2 + 0.2j, inf + 0j),  # rtol=0,
        (0.5, 0.2, 0, 0, nan + 0j),  # rtol=0,
        (0.5, -5, -10, 0.2 + 0.2j, 1.0495404166666666 + 0.05708208333333334j),  # rtol=1e-15,
        # (0.5, -10, -10, 0.2 + 0.2j, 1.092966013125+0.13455014673750001j),  # rtol=1e-15,  TODO: does not converge
        # (-10, -20, -10, 0.2 + 0.2j, -0.07712512+0.1275281408j),  # rtol=1e-13,  TODO: does not converge
        # (-1, 3.2, -1, 0.2 + 0.2j, 1.64+0.64j),  # rtol=1e-13,  TODO: does not converge
        # --- test_unital_argument
        (0.5, 0.2, 1.5, 1, 1.1496439092239847),  # rtol=1e-15
        (12.3, 8, 20.31, 1, 69280986.75273195),  # rtol=1e-15
        # (290.2, 321.5, 700.1, 1, 1.3396562400934e117),  # rtol=1e-12,  TODO: big
        # (-102.1, -20.3, 1.3, 1, 2.7899070752746906e22),  # rtol=1e-15  TODO: big
        # (-202.6, 60.3, 1.5, 1, -1.3113641413099326e-56),  # rtol=1e-12,  TODO: big
        # --- test_special_case_z_near_minus_1
        (0.5, 0.2, 1.3, -1, 0.9428846409614143),  # rtol=1e-15
        (12.3, 8, 5.3, -1, -4.84580998659568e-06),  # rtol=1e-15
        (221.5, 90.2, 132.3, -1, 2.0490488728377282e-42),  # rtol=1e-7,
        # (-102.1, -20.3, -80.8, -1, 45143784.46783885),  # rtol=1e-7,  # TODO: big
        # --- test_a_b_negative_int
        (-4, 2.02764642551431, 1.0561196186065624, 0.9473684210526314 - 0.10526315789473695j,
         0.0031961077109535375 - 0.0011313924606557173j),  # rtol=1e-12,
        (-8, -7.937789122896016, -15.964218273004214, 2 - 0.10526315789473695j,
         0.005543763196412503 - 0.0025948879065698306j),  # rtol=5e-13,
        (-8, 8.095813935368371, 4.0013768449590685, 0.9473684210526314 - 0.10526315789473695j,
         -0.0003054674127221263 - 9.261359291755414e-05j),  # rtol=5e-11,
        (-4, -3.956227226099288, -3.9316537064827854, 1.1578947368421053 - 0.3157894736842106j,
         -0.0020809502580892937 - 0.0041877333232365095j),  # rtol=1e-13,
        (2.02764642551431, -4, 2.050308316530781, 0.9473684210526314 - 0.10526315789473695j,
         0.0011282435590058734 + 0.0002027062303465851j),  # rtol=5e-13,
        (-7.937789122896016, -8, -15.964218273004214, 1.3684210526315788 + 0.10526315789473673j,
         -9.134907719238265e-05 - 0.00040219233987390723j),  # rtol=5e-12,
        (4.080187217753502, -4, 4.0013768449590685, 0.9473684210526314 - 0.10526315789473695j,
         -0.000519013062087489 - 0.0005855883076830948j),  # rtol=5e-12,
        # --- test_a_b_neg_int_after_euler_hypergeometric_transformation
        (-0.5, -0.9629749245209605, -15.5, 1.1578947368421053 - 1.1578947368421053j,
         0.9778506962676361 + 0.044083801141231616j),  # rtol=1e-12,
        (8.5, -3.9316537064827854, 1.5, 0.9473684210526314 - 0.10526315789473695j,
         4.0793167523167675 - 10.11694246310966j),  # rtol=5e-12,
        (8.5, -0.9629749245209605, 2.5, 1.1578947368421053 - 0.10526315789473695j,
         -2.9692999501916915 + 0.6394599899845594j),  # rtol=1e-11,
        (-0.5, -0.9629749245209605, -15.5, 1.5789473684210522 - 1.1578947368421053j,
         0.9493076367106102 - 0.04316852977183447j),  # rtol=1e-11,
        (-0.9220024191881196, -0.5, -15.5, 0.5263157894736841 + 0.10526315789473673j,
         0.9844377175631795 - 0.003120587561483841j),  # rtol=1e-10,
        # --- test_region1: |z| < 0.9 and real(z) >= 0
        (-0.9220024191881196, -0.9629749245209605, -15.963511401609862, 0.10526315789473673 - 0.3157894736842106j,
         0.9941449585778349 + 0.01756335047931358j),  # rtol=1e-14,
        (1.0272592605282642, -0.9629749245209605, -15.963511401609862, 0.5263157894736841 + 0.5263157894736841j,
         1.0388722293372104 - 0.09549450380041416j),  # rtol=5e-11,
        (2.02764642551431, 1.0561196186065624, -7.93846038215665, 0.10526315789473673 + 0.7368421052631575j,
         2.1948378809826434 + 24.934157235172222j),  # rtol=5e-15,
        (2.02764642551431, 16.088264119063613, 8.031683612216888, 0.3157894736842106 - 0.736842105263158j,
         -0.4075277891264672 - 0.06819344579666956j),  # rtol=1e-12,
        (4.080187217753502, 2.050308316530781, 8.031683612216888, 0.7368421052631575 - 0.10526315789473695j,
         2.833535530740603 - 0.6925373701408158j),  # rtol=5e-15,
        (2.02764642551431, 2.050308316530781, 4.078873014294075, 0.10526315789473673 - 0.3157894736842106j,
         1.005347176329683 - 0.3580736009337313j),  # rtol=5e-16,
        (-0.9220024191881196, -0.9629749245209605, -15.963511401609862, 0.3157894736842106 - 0.5263157894736843j,
         0.9824353641135369 + 0.029271018868990268j),  # rtol=5e-13,
        (-0.9220024191881196, -0.9629749245209605, -159.63511401609862, 0.3157894736842106 - 0.5263157894736843j,
         0.9982436200365834 + 0.002927268199671111j),  # rtol=1e-7,
        (2.02764642551431, 16.088264119063613, 8.031683612216888, 0.5263157894736841 - 0.5263157894736843j,
         -0.6906825165778091 + 0.8176575137504892j),  # rtol=5e-13,
        # --- test_region2: |z| < 1 and real(z) < 0
        (2.02764642551431, 1.0561196186065624, 4.078873014294075, -0.3157894736842106 + 0.7368421052631575j,
         0.7751915029081136 + 0.24068493258607315j),  # rtol=5e-15,
        # --- test_region4: 0.9 <= |z| <= 1 and |1 - z| >= 1
        (1.0272592605282642, 1.0561196186065624, -0.906685989801748, 0.10526315789473673 - 0.9473684210526316j,
         -3.9995506969395858 - 8.179533155338005j),  # rtol=1e-12,
        (8.5, 4.5, 8.077282662161238, 0.3157894736842106 + 0.9473684210526314j,
         -0.11307039404123598 - 0.443195310438102j),  # rtol=1e-12,
    )
}


@with_default_double
@mark.parametrize('a, b, c, z, expected', cases[hyp2f1])
def test_hyp2f1(a: complex, b: complex, c: complex, z: complex, expected: complex):
    res = hyp2f1(a, b, c, z)
    expected = tensor(expected, dtype=res.dtype)
    assert ((close(res.real, expected.real, equal_nan=True) and
             close(res.imag, expected.imag, equal_nan=True)) or
            close(abs(res-expected), 0, atol=1e-6))
