from cmath import inf, nan, pi

from hypothesis import assume, given, strategies as st
from pytest import mark

from phytorch.special.zeta import zeta
from tests.common.closeness import close, nice_and_close
from tests.common.dtypes import make_dtype_tests


class RiemannZetaTest:
    @mark.parametrize('z, expected', (
        # non-finite:
        (inf, 1), (-inf, complex(nan, nan)), (nan, complex(nan, nan)),
        # well-known:
        (-1, -1/12), (0, -0.5), (1, inf), (2, pi**2 / 6), (4, pi**4 / 90),
        # from scipy/tests/test_zeta.py
        # https://github.com/scipy/scipy/blob/9c2eff4826878df76deefd8045976a296ba0a07d/scipy/special/tests/test_zeta.py#L10
        (-2.1, 1 - 0.9972705002153750),
        (0.8, -4.437538415895550),
        # (0.9999, 1 + -10000.42279161673),  # TODO: doesn't work for floats
        (9, 1.002008392826082214),
        # too close to 1
        # (50, 1 + 8.881784210930816e-16),
        # (75, 1 + 2.646977960169853e-23)
    ))
    def test_zeta(self, z, expected):
        assert close(zeta(z), expected)

    @staticmethod
    @given(st.integers(1))
    def test_trivial_zeros(n):
        try:
            # these are hard-coded, but we want it to stay like that,
            # if we un-hard-code them
            assert nice_and_close(abs(zeta(-2*n)), 0)
        except RuntimeError:  # overflow
            assume(False)

    @mark.parametrize('y', (
        # from https://www.lmfdb.org/zeros/zeta/
        14.1347251417346937904572519835625,
        21.0220396387715549926284795938969,
        25.0108575801456887632137909925628,
        30.4248761258595132103118975305840,
        32.9350615877391896906623689640747,
        37.5861781588256712572177634807053,
        40.9187190121474951873981269146334,
        43.3270732809149995194961221654068,
        48.0051508811671597279424727494277,
        49.7738324776723021819167846785638,
        # 52.9703214777144606441472966088808,
        # 56.4462476970633948043677594767060,
        # 59.3470440026023530796536486749922,
        # 60.8317785246098098442599018245241,
        # 65.1125440480816066608750542531836,
        # 67.0798105294941737144788288965221,
        # 69.5464017111739792529268575265547,
        # 72.0671576744819075825221079698261,
        # 75.7046906990839331683269167620305,
        # 77.1448400688748053726826648563047,
        # 79.3373750202493679227635928771161,
        # 82.9103808540860301831648374947706,
        # 84.7354929805170501057353112068276,
        # 87.4252746131252294065316678509191,
        # 88.8091112076344654236823480795095,
        # 92.4918992705584842962597252418105,
        # 94.6513440405198869665979258152080,
        # 95.8706342282453097587410292192467,
        # 98.8311942181936922333244201386224,
        # 101.3178510057313912287854479402924,
        # 103.7255380404783394163984081086952,
        # 105.4466230523260944936708324141119,
        # 107.1686111842764075151233519630860,
        # 111.0295355431696745246564503099445,
        # 111.8746591769926370856120787167707,
        # 114.3202209154527127658909372761910,
        # 116.2266803208575543821608043120647,
        # 118.7907828659762173229791397026999,
        # 121.3701250024206459189455329704998,
        # 122.9468292935525882008174603307700,
        # 124.2568185543457671847320079661301,
        # 127.5166838795964951242793237669060,
        # 129.5787041999560509857680339061800,
        # 131.0876885309326567235663724615015,
        # 133.4977372029975864501304920426407,
        # 134.7565097533738713313260641571699,
        # 138.1160420545334432001915551902824,
        # 139.7362089521213889504500465233824,
        # 141.1237074040211237619403538184753,
        # 143.1118458076206327394051238689139,
        # 146.0009824867655185474025075964246,
        # 147.4227653425596020495211850104316,
        # 150.0535204207848803514324672369594,
        # 150.9252576122414667618525246783058,
        # 153.0246938111988961982565442551854,
        # 156.1129092942378675697501893101691,
        # 157.5975918175940598875305031584988,
        # 158.8499881714204987241749947755403,
        # 161.1889641375960275194373441293695,
        # 163.0307096871819872433110390006880,
        # 165.5370691879004188300389193548749,
        # 167.1844399781745134409577562462105,
        # 169.0945154155688214895058711814318,
        # 169.9119764794116989666998435958216,
        # 173.4115365195915529598461186493456,
        # 174.7541915233657258133787624558669,
        # 176.4414342977104188888926410578611,
        # 178.3774077760999772858309354141843,
        # 179.9164840202569961393400366120511,
        # 182.2070784843664619154070372269880,
        # 184.8744678483875088009606466172344,
        # 185.5987836777074714665277042683928,
        # 187.2289225835018519916415405861313,
        # 189.4161586560169370848522890998453,
        # 192.0266563607137865472836314255836,
        # 193.0797266038457040474022057943760,
        # 195.2653966795292353214631878148621,
        # 196.8764818409583169486222639146962,
        # 198.0153096762519124249199187022090,
        # 201.2647519437037887330161334275482,
        # 202.4935945141405342776866606378642,
        # 204.1896718031045543307164383863137,
        # 205.3946972021632860252123793906930,
        # 207.9062588878062098615019679077537,
        # 209.5765097168562598528356442898868,
        # 211.6908625953653075639074867307192,
        # 213.3479193597126661906391220210726,
        # 214.5470447834914232229442010725905,
        # 216.1695385082637002658695633544983,
        # 219.0675963490213789856772565904373,
        # 220.7149188393140033691155926339062,
        # 221.4307055546933387320974751192761,
        # 224.0070002546043352117288755285048,
        # 224.9833246695822875037825236805285,
        # 227.4214442796792913104614361606596,
        # 229.3374133055253481077600833060557,
        # 231.2501887004991647738061867700103,
        # 231.9872352531802486037716685391979,
        # 233.6934041789083006407044947325696,
        # 236.5242296658162058024755079556632,
    ))
    def test_nontrivial_zeros(self, y):
        # we're not super good at zeros, so we only really get the first few...
        assert close(zeta(0.5 + 1j * y), 0, atol=1e-5)
        assert close(zeta(0.5 - 1j * y), 0, atol=1e-5)


globals().update(make_dtype_tests((RiemannZetaTest,), 'RiemannZeta'))
